using Dapper.ColumnMapper;
using System;

namespace NMSSQLReplication
{
    /// <summary>
    /// Represents a Subscription.
    /// </summary>
    public class Subscription
    {
        /// <summary>
        /// Maximum status of all replication agents associated with the publication.
        /// </summary>
        public Status Status { get; set; }

        /// <summary>
        /// Maximum threshold warning generated by a subscription belonging to the publication.
        /// </summary>
        public Warning Warning { get; set; }

        /// <summary>
        /// Is the name of the Subscriber.
        /// </summary>
        public string Subscriber { get; set; }

        /// <summary>
        /// Is the name of the database used for the subscription.
        /// </summary>
        [ColumnMapping("Subscriber_Db")]
        public string SubscriberDb { get; set; }

        /// <summary>
        /// Is the name of the publication database.
        /// </summary>
        [ColumnMapping("Publisher_Db")]
        public string Publisher_Db { get; set; }

        /// <summary>
        /// Is the name of a publication.
        /// </summary>
        public string Publication { get; set; }

        /// <summary>
        /// Is the type of publication.
        /// </summary>
        [ColumnMapping("Publication_Type")]
        public PublicationType PublicationType { get; set; }

        /// <summary>
        /// Is the subscription type.
        /// </summary>
        public SubType Subtype { get; set; }

        /// <summary>
        /// The highest latency, in seconds, for data changes propagated by the Log Reader or Distribution Agents for a transactional publication.
        /// </summary>
        public int Latency { get; set; }

        /// <summary>
        /// Is the maximum latency for the transactional publication above which a warning is raised.
        /// </summary>
        public int LatencyThreshold { get; set; }

        /// <summary>
        /// Is the length of time, in hours, during which the agent has not run.
        /// </summary>
        public int? AgentNotRunning { get; set; }

        /// <summary>
        /// Is the length of time, in hours, that the agent has not run before a warning is raised.
        /// </summary>
        public int? AgentNotRunningThreshold { get; set; }

        /// <summary>
        /// Is the length of time, in hours, before the subscription expires if not synchronized.
        /// </summary>
        public int TimeToExpiration { get; set; }

        /// <summary>
        /// Is the time, in hours, before the subscription expires that a warning is raised.
        /// </summary>
        public int ExpirationThreshold { get; set; }

        /// <summary>
        /// Is the datetime that the Distribution Agent last ran.
        /// </summary>
        [ColumnMapping("Last_DistSync")]
        public DateTime LastDistSync { get; set; }

        /// <summary>
        /// Is the name of the Distribution Agent job for the subscription to a transactional publication.
        /// </summary>
        public string Distribution_Agentname { get; set; }

        /// <summary>
        /// Is the name of the Merge Agent job for the subscription to a merge publication.
        /// </summary>
        public string MergeAgentname { get; set; }

        /// <summary>
        /// Is the friendly name given to the subscription.
        /// </summary>
        public string MergeSubscriptionFriendlyname { get; set; }

        /// <summary>
        /// Is the name of the server on which the Merge Agent runs.
        /// </summary>
        public string MergeAgentLocation { get; set; }

        /// <summary>
        /// Connection used when synchronizing a subscription to a merge publication.
        /// </summary>
        public MergeConnectionType? MergeConnectionType { get; set; }

        /// <summary>
        /// Performance of the last synchronization compared to all synchronizations for the subscription, which is based on the delivery rate of the last synchronization divided by the average of all previous delivery rates.
        /// </summary>
        public int? MergePerformance { get; set; }

        /// <summary>
        /// Is the delivery rate of the last synchronization for the subscription.
        /// </summary>
        public int? MergeRunspeed { get; set; }

        /// <summary>
        /// Is the length of time to complete the last synchronization of the subscription.
        /// </summary>
        public int? MergeRunduration { get; set; }

        /// <summary>
        /// Is the ranking value used to order the subscriptions
        /// </summary>
        public int MonitorRanking { get; set; }

        /// <summary>
        /// Returns the monitor ranking value interpreted for Tansactional Publications.
        /// </summary>
        /// <returns>Returns the MonitorRanking value as TransactionalPublicationMonitorRanking enum.</returns>
        public TransactionalPublicationMonitorRanking GetMonitorRankingForTransactionalPublication()
        {
            //TODO: Maybe turn this into a property like TransactionalPerformanceQuality?
            return (TransactionalPublicationMonitorRanking)this.MonitorRanking;
        }

        /// <summary>
        /// Returns the monitor ranking value interpreted for Merge Publications.
        /// </summary>
        /// <returns>Returns the MonitorRanking value as MergePublicationMonitorRanking enum.</returns>
        public MergePublicationMonitorRanking GetMonitorRankingForMergePublication()
        {
            //TODO: Maybe turn this into a property like MergePerformanceQuality?
            return (MergePublicationMonitorRanking)this.MonitorRanking;
        }

        /// <summary>
        /// ID of the Distribution Agent job for subscriptions to a transactional publication.
        /// </summary>
        public byte[] DistributionAgentJobId { get; set; }

        /// <summary>
        /// ID of the Merge Agent job for subscriptions to a merge publication.
        /// </summary>
        public byte[] MergeAgentJobId { get; set; }

        /// <summary>
        /// ID of the Distribution Agent job for the subscription.
        /// </summary>
        public int DistributionAgentId { get; set; }

        /// <summary>
        /// ID of the agent profile used by the Distribution Agent.
        /// </summary>
        public int DistributionAgentProfileId { get; set; }

        /// <summary>
        /// ID of the Merge Agent job for the subscription.
        /// </summary>
        public int? MergeAgentId { get; set; }

        /// <summary>
        /// ID of the agent profile used by the Merge Agent.
        /// </summary>
        public int? MergeAgentProfileId { get; set; }

        /// <summary>
        /// Name of the Log Reader Agent.
        /// </summary>
        public string LogReaderAgentname { get; set; }

        /// <summary>
        /// Is the name of the Publisher.
        /// </summary>
        public string Publisher { get; set; }

        /// <summary>
        /// For transactional replication, performance quality is determined by the latency threshold.
        /// </summary>
        /// <returns>Returns the performance quality value.</returns>
        /// <remarks>See <a href="http://technet.microsoft.com/en-us/library/ms152768.aspx">MSDN</a></remarks>
        public TransactionalPerformanceQuality TransactionalPerformanceQuality
        {
            get
            {
                if (this.LatencyThreshold > 0)
                {
                    var value = this.Latency / (double)this.LatencyThreshold;
                    if (value < .35)
                        return TransactionalPerformanceQuality.Excellent;
                    if (value < 60)
                        return TransactionalPerformanceQuality.Good;
                    if (value < 85)
                        return TransactionalPerformanceQuality.Fair;
                    if (value < 100)
                        return TransactionalPerformanceQuality.Poor;
                    return TransactionalPerformanceQuality.Critical;
                }
                return TransactionalPerformanceQuality.None;
            }
            set
            {
                //NO-OP; this is just to force the XML serializer to output the property since it, by default doesn't
                //       output read-only properties. Instead of messing with the config in another project (which
                //       would require us pulling in the types in this assembly) we just add an empty setter.
                //       Also see: http://stackoverflow.com/a/14463089/215042
            }
        }

        /// <summary>
        /// For merge replication
        /// </summary>
        /// <returns>Returns the performance quality value.</returns>
        /// <remarks>See <a href="http://technet.microsoft.com/en-us/library/ms152768.aspx">MSDN</a></remarks>
        public MergePerformanceQuality MergePerformanceQuality
        {
            get
            {
                //TODO: Implement!
                return MergePerformanceQuality.None;
            }
            set
            {
                //NO-OP; this is just to force the XML serializer to output the property since it, by default doesn't
                //       output read-only properties. Instead of messing with the config in another project (which
                //       would require us pulling in the types in this assembly) we just add an empty setter.
                //       Also see: http://stackoverflow.com/a/14463089/215042
            }
        }
    }
}
