using Dapper.ColumnMapper;
using System;

namespace NMSSQLReplication
{
    /// <summary>
    /// Represents a Publication.
    /// </summary>
    public class Publication
    {
        /// <summary>
        /// Is the name of the Publisher.
        /// </summary>
        [ColumnMapping("Publisher_Db")]
        public string PublisherDb { get; set; }

        /// <summary>
        /// Is the name of a publication.
        /// </summary>
        [ColumnMapping("Publication")]
        public string Name { get; set; }

        /// <summary>
        /// Is the Id of the publication.
        /// </summary>
        [ColumnMapping("Publication_Id")]
        public int PublicationId { get; set; }

        /// <summary>
        /// Is the type of publication.
        /// </summary>
        [ColumnMapping("Publication_Type ")]
        public PublicationType PublicationType { get; set; }

        /// <summary>
        /// Maximum status of all replication agents associated with the publication.
        /// </summary>
        public Status Status { get; set; }

        /// <summary>
        /// Maximum threshold warning generated by a subscription belonging to the publication.
        /// </summary>
        public Warning Warning { get; set; }

        /// <summary>
        /// The highest latency, in seconds, for data changes propagated by the Log Reader or Distribution Agents for a transactional publication.
        /// </summary>
        [ColumnMapping("Worst_Latency")]
        public int? WorstLatency { get; set; }

        /// <summary>
        /// The lowest latency, in seconds, for data changes propagated by the Log Reader or Distribution Agents for a transactional publication.
        /// </summary>
        [ColumnMapping("Best_Latency")]
        public int? BestLatency { get; set; }

        /// <summary>
        /// The average latency, in seconds, for data changes propagated by the Log Reader or Distribution Agents for a transactional publication.
        /// </summary>
        [ColumnMapping("Average_Latency")]
        public int? AverageLatency { get; set; }

        /// <summary>
        /// Is the last datetime that the Distribution Agent ran.
        /// </summary>
        [ColumnMapping("Last_DistSync")]
        public DateTime LastDistSync { get; set; }
        
        /// <summary>
        /// Is the retention period for the publication.
        /// </summary>
        public int Retention { get; set; }
        
        /// <summary>
        /// Is the latency threshold set for the transactional publication.
        /// </summary>
        public int LatencyThreshold { get; set; }
        
        /// <summary>
        /// Is the expiration threshold set for the publication if it is a merge publication.
        /// </summary>
        public int ExpirationThreshold { get; set; }
        
        /// <summary>
        /// Is the threshold set for the longest time for an agent not to have run.
        /// </summary>
        public int? AgentNotRunningThreshold { get; set; }
        
        /// <summary>
        /// Is the number of subscriptions to a publication.
        /// </summary>
        public int SubscriptionCount { get; set; }
        
        /// <summary>
        /// Is the number of distribution agents running for the publication.
        /// </summary>
        public int RunningdDistAgentCount { get; set; }

        /// <summary>
        /// Name of the Snapshot Agent job for the publication.
        /// </summary>
        [ColumnMapping("Snapshot_Agentname")]
        public string SnapshotAgentname { get; set; }

        /// <summary>
        /// Name of the Log Reader Agent job for the transactional publication.
        /// </summary>
        [ColumnMapping("Logreader_Agentname")]
        public string LogreaderAgentname { get; set; }

        /// <summary>
        /// Name of the Queue Reader Agent job for a transactional publication that supports queued updating.
        /// </summary>
        [ColumnMapping("QReader_Agentname")]
        public string QueueReaderAgentname { get; set; }

        /// <summary>
        /// Is the longest synchronization time for the merge publication.
        /// </summary>
        [ColumnMapping("Worst_RunspeedPerf")]
        public int? WorstRunspeedPerf { get; set; }

        /// <summary>
        /// Is the shortest synchronization time for the merge publication.
        /// </summary>
        [ColumnMapping("Best_RunspeedPerf")]
        public int? BestRunspeedPerf { get; set; }

        /// <summary>
        /// Is the average synchronization time for the merge publication.
        /// </summary>
        [ColumnMapping("Average_RunspeedPerf")]
        public int? AverageRunspeedPerf { get; set; }

        /// <summary>
        /// Is the unit used to express retention.
        /// </summary>
        [ColumnMapping("Retention_Period_Unit")]
        public int? RetentionPeriodUnit { get; set; }
        
        /// <summary>
        /// The name of the instance of SQL Server publishing the publication.
        /// </summary>
        public string Publisher { get; set; }
    }
}
